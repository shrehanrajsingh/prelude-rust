; This is the ArgParser module
; of RS-C: the C compiler for Prelude
; Aka, "Prelude-C"
; Timestamp: Sun Jan 5, 2025 23:41 PM

; usage
; rsc -f file_name.rsc

org 00H
; Command line arguments are stored
; on the stack after argc
; stack pointer register, sp, contains
; number of arguments passed, more formally,
; argc. Further stack elements contain addresses
; of cmdline arguments.
; Since we are following 8-bit 8051 system
; architecture, we will use 2 bytes to denote
; the address of one command line argument.
; We follow Big Endian as always, and we also 
; provide 2 bytes for argc.
; Note: argument strings are stored on RAM (more formally virtual memory).

; store program name
prog_name:
; when we write byte times x
; we reserve x bytes on scratch pad RAM
; and store it's location here in ROM
; writing `byte times 2` is similar to writing
; byte 
; byte
; Both bytes are reserved on RAM and replaced with
; their memory location in ROM
; Assume the following instruction reserves
; two bytes of RAM at locations 0x3C and 0x3D. (!! this will be decided during codegen !!)
; now ROM will contain [..., 0x3C, 0x3D, ...]
; All memory locations will be dealt with in RAM (virtual memory)
; ROM is "Read Only Memory"
byte times 2

argc:
byte times 2

file_name:
byte times 2

; use bank 0
set PSW.4, 0
set PSW.3, 0

; sp contains argc,
; so we pop it and store the result, aka argc,
; in memory location for argc
; this also increases stack by !! 1 byte !!
; however, we reserved 2 bytes for argc,
; so we pop the next byte to argc + 1
; (following BE)
pop argc
pop argc + 1

; now stack points to program name
pop prog_name
pop prog_name + 1

; now we process other arguments
; ...

end